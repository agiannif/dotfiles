[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Show the user email for the current repository.
	whoami = config user.email

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[branch]

    # Sorts branches by most recent commit date (newest first) instead of alphabetically
    sort = -committerdate

[column]

    # Makes Git automatically format output in columns when it makes sense
    ui = auto

[commit]

    verbose = true

[core]

    # Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[credential]

	helper = osxkeychain

[diff]

    # Uses a more advanced algorithm for showing differences between files
    algorithm = histogram

    # Highlights moved code blocks in diffs
    colorMoved = plain

    # Shows more intuitive prefixes in diffs (like "index" vs "working tree")
    mnemonicPrefix = true

	# Detect copies as well as renames
	renames = copies

[fetch]

    prune = true
	pruneTags = true
	all = true

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 50

[init]

    defaultBranch = main

[merge]

    conflictstyle = zdiff3

[push]

	# Only pushes the current branch by default
    default = simple

	autoSetupRemote = true
	followTags = true

[rebase]

    autoSquash = true
	autoStash = true
	updateRefs = true

[rerere]

    enabled = true
	autoupdate = true

[tag]

    # Sorts tags by version numbers properly (so v1.10 comes after v1.9)
    sort = version:refname

[user]
	name = Anthony Fenzl
	email = anthonyfenzl@pm.me
